// Code generated by protoc-gen-go.
// source: manager.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	manager.proto
	router.proto

It has these top-level messages:
	LoginReq
	LoginRes
	SendMsgP2PReq
	SendMsgP2PRes
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginReq struct {
	UID   int64  `protobuf:"varint,3,opt,name=UID,json=uID" json:"UID,omitempty"`
	Token string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginRes struct {
	ErrCode uint32 `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,4,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *LoginRes) Reset()                    { *m = LoginRes{} }
func (m *LoginRes) String() string            { return proto.CompactTextString(m) }
func (*LoginRes) ProtoMessage()               {}
func (*LoginRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*LoginReq)(nil), "pb.LoginReq")
	proto.RegisterType((*LoginRes)(nil), "pb.LoginRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ManagerRPC service

type ManagerRPCClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
}

type managerRPCClient struct {
	cc *grpc.ClientConn
}

func NewManagerRPCClient(cc *grpc.ClientConn) ManagerRPCClient {
	return &managerRPCClient{cc}
}

func (c *managerRPCClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := grpc.Invoke(ctx, "/pb.ManagerRPC/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ManagerRPC service

type ManagerRPCServer interface {
	Login(context.Context, *LoginReq) (*LoginRes, error)
}

func RegisterManagerRPCServer(s *grpc.Server, srv ManagerRPCServer) {
	s.RegisterService(&_ManagerRPC_serviceDesc, srv)
}

func _ManagerRPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerRPCServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ManagerRPC/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerRPCServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ManagerRPC",
	HandlerType: (*ManagerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ManagerRPC_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("manager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0xcc, 0x4b,
	0x4c, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe2,
	0xe2, 0xf0, 0xc9, 0x4f, 0xcf, 0xcc, 0x0b, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0x0e, 0xf5, 0x74,
	0x91, 0x60, 0x56, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0x2e, 0xf5, 0x74, 0x11, 0x12, 0xe1, 0x62, 0x2d,
	0xc9, 0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x51, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0x6c, 0xe0,
	0x7a, 0x8a, 0x85, 0x24, 0xb8, 0xd8, 0x53, 0x8b, 0x8a, 0x9c, 0xf3, 0x53, 0x52, 0xc1, 0xfa, 0x78,
	0x83, 0x60, 0x5c, 0x21, 0x31, 0x2e, 0xb6, 0xd4, 0xa2, 0xa2, 0xe0, 0x92, 0x22, 0xa8, 0x66, 0x28,
	0xcf, 0xc8, 0x98, 0x8b, 0xcb, 0x17, 0xe2, 0x8c, 0xa0, 0x00, 0x67, 0x21, 0x55, 0x2e, 0x56, 0xb0,
	0x59, 0x42, 0x3c, 0x7a, 0x05, 0x49, 0x7a, 0x30, 0xa7, 0x48, 0x21, 0xf3, 0x8a, 0x95, 0x18, 0x92,
	0xd8, 0xc0, 0x2e, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xf7, 0x91, 0x87, 0xc2, 0x00,
	0x00, 0x00,
}

// Code generated by protoc-gen-go.
// source: manager.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MGExceptionMsgReq struct {
	SourceUID int64  `protobuf:"varint,1,opt,name=sourceUID" json:"sourceUID,omitempty"`
	TargetUID int64  `protobuf:"varint,2,opt,name=targetUID" json:"targetUID,omitempty"`
	MsgID     string `protobuf:"bytes,3,opt,name=msgID" json:"msgID,omitempty"`
	Msg       string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *MGExceptionMsgReq) Reset()                    { *m = MGExceptionMsgReq{} }
func (m *MGExceptionMsgReq) String() string            { return proto.CompactTextString(m) }
func (*MGExceptionMsgReq) ProtoMessage()               {}
func (*MGExceptionMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *MGExceptionMsgReq) GetSourceUID() int64 {
	if m != nil {
		return m.SourceUID
	}
	return 0
}

func (m *MGExceptionMsgReq) GetTargetUID() int64 {
	if m != nil {
		return m.TargetUID
	}
	return 0
}

func (m *MGExceptionMsgReq) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

func (m *MGExceptionMsgReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type MGExceptionMsgRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *MGExceptionMsgRes) Reset()                    { *m = MGExceptionMsgRes{} }
func (m *MGExceptionMsgRes) String() string            { return proto.CompactTextString(m) }
func (*MGExceptionMsgRes) ProtoMessage()               {}
func (*MGExceptionMsgRes) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MGExceptionMsgRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *MGExceptionMsgRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

type MGOfflineMsgReq struct {
	Uid int64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *MGOfflineMsgReq) Reset()                    { *m = MGOfflineMsgReq{} }
func (m *MGOfflineMsgReq) String() string            { return proto.CompactTextString(m) }
func (*MGOfflineMsgReq) ProtoMessage()               {}
func (*MGOfflineMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MGOfflineMsgReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type OfflineMsg struct {
	SourceUID int64  `protobuf:"varint,1,opt,name=sourceUID" json:"sourceUID,omitempty"`
	TargetUID int64  `protobuf:"varint,2,opt,name=targetUID" json:"targetUID,omitempty"`
	MsgID     string `protobuf:"bytes,3,opt,name=msgID" json:"msgID,omitempty"`
	Msg       string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *OfflineMsg) Reset()                    { *m = OfflineMsg{} }
func (m *OfflineMsg) String() string            { return proto.CompactTextString(m) }
func (*OfflineMsg) ProtoMessage()               {}
func (*OfflineMsg) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *OfflineMsg) GetSourceUID() int64 {
	if m != nil {
		return m.SourceUID
	}
	return 0
}

func (m *OfflineMsg) GetTargetUID() int64 {
	if m != nil {
		return m.TargetUID
	}
	return 0
}

func (m *OfflineMsg) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

func (m *OfflineMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type MGOfflineMsgRes struct {
	ErrCode uint32        `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string        `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
	Msgs    []*OfflineMsg `protobuf:"bytes,3,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *MGOfflineMsgRes) Reset()                    { *m = MGOfflineMsgRes{} }
func (m *MGOfflineMsgRes) String() string            { return proto.CompactTextString(m) }
func (*MGOfflineMsgRes) ProtoMessage()               {}
func (*MGOfflineMsgRes) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *MGOfflineMsgRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *MGOfflineMsgRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func (m *MGOfflineMsgRes) GetMsgs() []*OfflineMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type MGSyncMsgReq struct {
	UID       int64 `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
	CurrentID int64 `protobuf:"varint,2,opt,name=currentID" json:"currentID,omitempty"`
	TotalID   int64 `protobuf:"varint,3,opt,name=totalID" json:"totalID,omitempty"`
}

func (m *MGSyncMsgReq) Reset()                    { *m = MGSyncMsgReq{} }
func (m *MGSyncMsgReq) String() string            { return proto.CompactTextString(m) }
func (*MGSyncMsgReq) ProtoMessage()               {}
func (*MGSyncMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *MGSyncMsgReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *MGSyncMsgReq) GetCurrentID() int64 {
	if m != nil {
		return m.CurrentID
	}
	return 0
}

func (m *MGSyncMsgReq) GetTotalID() int64 {
	if m != nil {
		return m.TotalID
	}
	return 0
}

type MGSyncMsgRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *MGSyncMsgRes) Reset()                    { *m = MGSyncMsgRes{} }
func (m *MGSyncMsgRes) String() string            { return proto.CompactTextString(m) }
func (*MGSyncMsgRes) ProtoMessage()               {}
func (*MGSyncMsgRes) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *MGSyncMsgRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *MGSyncMsgRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func init() {
	proto.RegisterType((*MGExceptionMsgReq)(nil), "rpc.MGExceptionMsgReq")
	proto.RegisterType((*MGExceptionMsgRes)(nil), "rpc.MGExceptionMsgRes")
	proto.RegisterType((*MGOfflineMsgReq)(nil), "rpc.MGOfflineMsgReq")
	proto.RegisterType((*OfflineMsg)(nil), "rpc.offlineMsg")
	proto.RegisterType((*MGOfflineMsgRes)(nil), "rpc.MGOfflineMsgRes")
	proto.RegisterType((*MGSyncMsgReq)(nil), "rpc.MGSyncMsgReq")
	proto.RegisterType((*MGSyncMsgRes)(nil), "rpc.MGSyncMsgRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ManagerServerRPC service

type ManagerServerRPCClient interface {
	SetExceptionMsg(ctx context.Context, in *MGExceptionMsgReq, opts ...grpc.CallOption) (*MGExceptionMsgRes, error)
	GetOfflineMsgs(ctx context.Context, in *MGOfflineMsgReq, opts ...grpc.CallOption) (*MGOfflineMsgRes, error)
	Sync(ctx context.Context, in *MGSyncMsgReq, opts ...grpc.CallOption) (*MGSyncMsgRes, error)
}

type managerServerRPCClient struct {
	cc *grpc.ClientConn
}

func NewManagerServerRPCClient(cc *grpc.ClientConn) ManagerServerRPCClient {
	return &managerServerRPCClient{cc}
}

func (c *managerServerRPCClient) SetExceptionMsg(ctx context.Context, in *MGExceptionMsgReq, opts ...grpc.CallOption) (*MGExceptionMsgRes, error) {
	out := new(MGExceptionMsgRes)
	err := grpc.Invoke(ctx, "/rpc.ManagerServerRPC/SetExceptionMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServerRPCClient) GetOfflineMsgs(ctx context.Context, in *MGOfflineMsgReq, opts ...grpc.CallOption) (*MGOfflineMsgRes, error) {
	out := new(MGOfflineMsgRes)
	err := grpc.Invoke(ctx, "/rpc.ManagerServerRPC/GetOfflineMsgs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServerRPCClient) Sync(ctx context.Context, in *MGSyncMsgReq, opts ...grpc.CallOption) (*MGSyncMsgRes, error) {
	out := new(MGSyncMsgRes)
	err := grpc.Invoke(ctx, "/rpc.ManagerServerRPC/Sync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ManagerServerRPC service

type ManagerServerRPCServer interface {
	SetExceptionMsg(context.Context, *MGExceptionMsgReq) (*MGExceptionMsgRes, error)
	GetOfflineMsgs(context.Context, *MGOfflineMsgReq) (*MGOfflineMsgRes, error)
	Sync(context.Context, *MGSyncMsgReq) (*MGSyncMsgRes, error)
}

func RegisterManagerServerRPCServer(s *grpc.Server, srv ManagerServerRPCServer) {
	s.RegisterService(&_ManagerServerRPC_serviceDesc, srv)
}

func _ManagerServerRPC_SetExceptionMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGExceptionMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServerRPCServer).SetExceptionMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ManagerServerRPC/SetExceptionMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServerRPCServer).SetExceptionMsg(ctx, req.(*MGExceptionMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerServerRPC_GetOfflineMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGOfflineMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServerRPCServer).GetOfflineMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ManagerServerRPC/GetOfflineMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServerRPCServer).GetOfflineMsgs(ctx, req.(*MGOfflineMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerServerRPC_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGSyncMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServerRPCServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ManagerServerRPC/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServerRPCServer).Sync(ctx, req.(*MGSyncMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerServerRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ManagerServerRPC",
	HandlerType: (*ManagerServerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetExceptionMsg",
			Handler:    _ManagerServerRPC_SetExceptionMsg_Handler,
		},
		{
			MethodName: "GetOfflineMsgs",
			Handler:    _ManagerServerRPC_GetOfflineMsgs_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _ManagerServerRPC_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

func init() { proto.RegisterFile("manager.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x93, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0xa9, 0x8b, 0x18, 0x46, 0x11, 0xd8, 0x10, 0xd2, 0x10, 0x0f, 0x64, 0xb9, 0x70, 0xea,
	0x01, 0xef, 0xc6, 0x04, 0x48, 0xc3, 0xa1, 0xd1, 0x6c, 0x63, 0xe2, 0xb5, 0x96, 0xa1, 0x92, 0xd0,
	0x3f, 0xce, 0x2e, 0xfe, 0xf9, 0x84, 0x7e, 0x2d, 0xd3, 0x52, 0x58, 0x11, 0x4e, 0x1c, 0xbc, 0xed,
	0xbc, 0xb7, 0xed, 0xbc, 0xdf, 0x74, 0x0a, 0x8d, 0x38, 0x48, 0x82, 0x08, 0xc9, 0xc9, 0x28, 0xd5,
	0x29, 0x67, 0x94, 0x85, 0xe2, 0x03, 0xda, 0x9e, 0x3b, 0xfd, 0x0c, 0x31, 0xd3, 0xcb, 0x34, 0xf1,
	0x54, 0x24, 0xf1, 0x8d, 0xdf, 0x40, 0x5d, 0xa5, 0x6b, 0x0a, 0xf1, 0x69, 0x36, 0xb1, 0xad, 0xbe,
	0x35, 0x64, 0xd2, 0x08, 0xb9, 0xab, 0x03, 0x8a, 0x50, 0xe7, 0xee, 0xd9, 0xc6, 0xdd, 0x09, 0xbc,
	0x03, 0xe7, 0xb1, 0x8a, 0x66, 0x13, 0x9b, 0xf5, 0xad, 0x61, 0x5d, 0x6e, 0x0a, 0xde, 0x02, 0x16,
	0xab, 0xc8, 0xae, 0x16, 0x5a, 0x7e, 0x14, 0xd3, 0xc3, 0xc6, 0x8a, 0xdb, 0x70, 0x81, 0x44, 0xe3,
	0x74, 0x8e, 0x45, 0xdb, 0x86, 0xdc, 0x96, 0xbc, 0x0b, 0x35, 0x24, 0xf2, 0x35, 0x15, 0x1d, 0xeb,
	0xb2, 0xac, 0xc4, 0x00, 0x9a, 0x9e, 0xfb, 0xb0, 0x58, 0xac, 0x96, 0x09, 0x96, 0xe9, 0x5b, 0xc0,
	0xd6, 0xcb, 0x79, 0x99, 0x3b, 0x3f, 0x8a, 0x0c, 0x20, 0xdd, 0x5d, 0xf9, 0x17, 0xba, 0xd7, 0xbf,
	0xb1, 0x4e, 0x60, 0xe3, 0x03, 0xa8, 0xc6, 0x2a, 0x52, 0x36, 0xeb, 0xb3, 0xe1, 0xe5, 0xa8, 0xe9,
	0x50, 0x16, 0x3a, 0x86, 0x43, 0x16, 0xa6, 0x78, 0x86, 0x2b, 0xcf, 0xf5, 0xbf, 0x92, 0xd0, 0xd0,
	0x1b, 0x2e, 0x56, 0x12, 0x85, 0x6b, 0x22, 0x4c, 0xb4, 0x21, 0xda, 0x09, 0x79, 0x2c, 0x9d, 0xea,
	0x60, 0x55, 0x32, 0x31, 0xb9, 0x2d, 0xc5, 0xfd, 0xde, 0x9b, 0x4f, 0x00, 0x18, 0x7d, 0x5b, 0xd0,
	0xf2, 0x36, 0x3b, 0xe7, 0x23, 0xbd, 0x23, 0xc9, 0xc7, 0x31, 0x1f, 0x43, 0xd3, 0x47, 0xfd, 0xfb,
	0xcb, 0xf3, 0x6e, 0x81, 0x76, 0xb0, 0x87, 0xbd, 0xe3, 0xba, 0x12, 0x15, 0x7e, 0x07, 0xd7, 0x2e,
	0x6a, 0x33, 0x60, 0xc5, 0x3b, 0xe5, 0xdd, 0xbd, 0x5d, 0xe8, 0x1d, 0x53, 0xf3, 0xe7, 0x1d, 0xa8,
	0xe6, 0x64, 0xbc, 0x5d, 0xfa, 0x66, 0x80, 0xbd, 0x03, 0x49, 0x89, 0xca, 0x4b, 0xad, 0xf8, 0x65,
	0x6e, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x29, 0xe8, 0x0b, 0x31, 0x43, 0x03, 0x00, 0x00,
}

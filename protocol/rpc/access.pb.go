// Code generated by protoc-gen-go.
// source: access.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	access.proto
	idgen.proto
	logic.proto
	manager.proto
	register.proto

It has these top-level messages:
	ASSendP2PMsgReq
	ASSendP2PMsgRes
	ASSendGroupMsgReq
	ASSendGroupMsgRes
	Snowflake
	LoginReq
	LoginRes
	PingReq
	PingRes
	SendP2PMsgReq
	SendP2PMsgRes
	AcceptP2PMsgAckReq
	AcceptP2PMsgAckRes
	SendGroupMsgReq
	SendGroupMsgRes
	MGExceptionMsgReq
	MGExceptionMsgRes
	RGLoginReq
	RGLoginRes
	RGAccessReq
	RGAccessRes
	RGAuthReq
	RGAuthRes
	RGPingReq
	RGPingRes
	RGOnlineReq
	RGOnlineRes
	RGCreateGroupReq
	RGCreateGroupRes
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ASSendP2PMsgReq struct {
	SourceUID int64  `protobuf:"varint,1,opt,name=sourceUID" json:"sourceUID,omitempty"`
	TargetUID int64  `protobuf:"varint,2,opt,name=targetUID" json:"targetUID,omitempty"`
	MsgID     string `protobuf:"bytes,3,opt,name=msgID" json:"msgID,omitempty"`
	Msg       string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *ASSendP2PMsgReq) Reset()                    { *m = ASSendP2PMsgReq{} }
func (m *ASSendP2PMsgReq) String() string            { return proto.CompactTextString(m) }
func (*ASSendP2PMsgReq) ProtoMessage()               {}
func (*ASSendP2PMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ASSendP2PMsgReq) GetSourceUID() int64 {
	if m != nil {
		return m.SourceUID
	}
	return 0
}

func (m *ASSendP2PMsgReq) GetTargetUID() int64 {
	if m != nil {
		return m.TargetUID
	}
	return 0
}

func (m *ASSendP2PMsgReq) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

func (m *ASSendP2PMsgReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ASSendP2PMsgRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *ASSendP2PMsgRes) Reset()                    { *m = ASSendP2PMsgRes{} }
func (m *ASSendP2PMsgRes) String() string            { return proto.CompactTextString(m) }
func (*ASSendP2PMsgRes) ProtoMessage()               {}
func (*ASSendP2PMsgRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ASSendP2PMsgRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ASSendP2PMsgRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

type ASSendGroupMsgReq struct {
	GroupID int64  `protobuf:"varint,1,opt,name=groupID" json:"groupID,omitempty"`
	MsgID   string `protobuf:"bytes,2,opt,name=msgID" json:"msgID,omitempty"`
	Msg     string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *ASSendGroupMsgReq) Reset()                    { *m = ASSendGroupMsgReq{} }
func (m *ASSendGroupMsgReq) String() string            { return proto.CompactTextString(m) }
func (*ASSendGroupMsgReq) ProtoMessage()               {}
func (*ASSendGroupMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ASSendGroupMsgReq) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ASSendGroupMsgReq) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

func (m *ASSendGroupMsgReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ASSendGroupMsgRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *ASSendGroupMsgRes) Reset()                    { *m = ASSendGroupMsgRes{} }
func (m *ASSendGroupMsgRes) String() string            { return proto.CompactTextString(m) }
func (*ASSendGroupMsgRes) ProtoMessage()               {}
func (*ASSendGroupMsgRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ASSendGroupMsgRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ASSendGroupMsgRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func init() {
	proto.RegisterType((*ASSendP2PMsgReq)(nil), "rpc.ASSendP2PMsgReq")
	proto.RegisterType((*ASSendP2PMsgRes)(nil), "rpc.ASSendP2PMsgRes")
	proto.RegisterType((*ASSendGroupMsgReq)(nil), "rpc.ASSendGroupMsgReq")
	proto.RegisterType((*ASSendGroupMsgRes)(nil), "rpc.ASSendGroupMsgRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccessServerRPC service

type AccessServerRPCClient interface {
	SendP2PMsg(ctx context.Context, in *ASSendP2PMsgReq, opts ...grpc.CallOption) (*ASSendP2PMsgRes, error)
}

type accessServerRPCClient struct {
	cc *grpc.ClientConn
}

func NewAccessServerRPCClient(cc *grpc.ClientConn) AccessServerRPCClient {
	return &accessServerRPCClient{cc}
}

func (c *accessServerRPCClient) SendP2PMsg(ctx context.Context, in *ASSendP2PMsgReq, opts ...grpc.CallOption) (*ASSendP2PMsgRes, error) {
	out := new(ASSendP2PMsgRes)
	err := grpc.Invoke(ctx, "/rpc.AccessServerRPC/SendP2PMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccessServerRPC service

type AccessServerRPCServer interface {
	SendP2PMsg(context.Context, *ASSendP2PMsgReq) (*ASSendP2PMsgRes, error)
}

func RegisterAccessServerRPCServer(s *grpc.Server, srv AccessServerRPCServer) {
	s.RegisterService(&_AccessServerRPC_serviceDesc, srv)
}

func _AccessServerRPC_SendP2PMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ASSendP2PMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServerRPCServer).SendP2PMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessServerRPC/SendP2PMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServerRPCServer).SendP2PMsg(ctx, req.(*ASSendP2PMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessServerRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AccessServerRPC",
	HandlerType: (*AccessServerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendP2PMsg",
			Handler:    _AccessServerRPC_SendP2PMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access.proto",
}

func init() { proto.RegisterFile("access.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x91, 0x41, 0x6b, 0xc2, 0x40,
	0x10, 0x85, 0x1b, 0xb7, 0x55, 0x32, 0xb4, 0xd8, 0x0e, 0x52, 0x96, 0xd2, 0x83, 0xe4, 0xe4, 0x29,
	0x07, 0x7b, 0xeb, 0x4d, 0x62, 0x29, 0x1e, 0x84, 0xb0, 0xc1, 0x1f, 0x60, 0xd7, 0x61, 0x4f, 0x76,
	0xd3, 0x99, 0xa4, 0xbf, 0xbf, 0x64, 0xa3, 0x2e, 0x58, 0x4f, 0xde, 0xf6, 0xbd, 0x07, 0xf3, 0xbe,
	0x9d, 0x81, 0xfb, 0xad, 0xb5, 0x24, 0x92, 0xd7, 0xec, 0x1b, 0x8f, 0x8a, 0x6b, 0x9b, 0xb5, 0x30,
	0x5e, 0x54, 0x15, 0x7d, 0xef, 0xca, 0x79, 0xb9, 0x16, 0x67, 0xe8, 0x07, 0x5f, 0x21, 0x15, 0xdf,
	0xb2, 0xa5, 0xcd, 0x6a, 0xa9, 0x93, 0x69, 0x32, 0x53, 0x26, 0x1a, 0x5d, 0xda, 0x6c, 0xd9, 0x51,
	0xd3, 0xa5, 0x83, 0x3e, 0x3d, 0x19, 0x38, 0x81, 0xbb, 0xbd, 0xb8, 0xd5, 0x52, 0xab, 0x69, 0x32,
	0x4b, 0x4d, 0x2f, 0xf0, 0x11, 0xd4, 0x5e, 0x9c, 0xbe, 0x0d, 0x5e, 0xf7, 0xcc, 0x8a, 0xf3, 0x5a,
	0x41, 0x0d, 0x23, 0x62, 0x2e, 0xfc, 0x8e, 0x42, 0xe9, 0x83, 0x39, 0x4a, 0x7c, 0x86, 0x21, 0x31,
	0x57, 0x0d, 0x87, 0xbe, 0xd4, 0x1c, 0x54, 0xb6, 0x81, 0xa7, 0x7e, 0xc8, 0x27, 0xfb, 0xb6, 0x3e,
	0xd0, 0x6b, 0x18, 0xb9, 0x4e, 0x9e, 0xd8, 0x8f, 0x32, 0xb2, 0x0d, 0x2e, 0xb0, 0xa9, 0xc8, 0xf6,
	0xf1, 0x7f, 0xec, 0x15, 0x74, 0xf3, 0x35, 0x8c, 0x17, 0x61, 0xdd, 0x15, 0xf1, 0x2f, 0xb1, 0x29,
	0x0b, 0x7c, 0x07, 0x88, 0x7f, 0xc6, 0x49, 0xce, 0xb5, 0xcd, 0xcf, 0xb6, 0xff, 0x72, 0xc9, 0x95,
	0xec, 0xe6, 0x6b, 0x18, 0x8e, 0xf6, 0xf6, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x79, 0xdb, 0xff,
	0xc4, 0x01, 0x00, 0x00,
}

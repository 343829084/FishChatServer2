// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthLoginReq struct {
	UID   int64  `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *AuthLoginReq) Reset()                    { *m = AuthLoginReq{} }
func (m *AuthLoginReq) String() string            { return proto.CompactTextString(m) }
func (*AuthLoginReq) ProtoMessage()               {}
func (*AuthLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type AuthLoginRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *AuthLoginRes) Reset()                    { *m = AuthLoginRes{} }
func (m *AuthLoginRes) String() string            { return proto.CompactTextString(m) }
func (*AuthLoginRes) ProtoMessage()               {}
func (*AuthLoginRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*AuthLoginReq)(nil), "rpc.AuthLoginReq")
	proto.RegisterType((*AuthLoginRes)(nil), "rpc.AuthLoginRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AuthServerRPC service

type AuthServerRPCClient interface {
	Login(ctx context.Context, in *AuthLoginReq, opts ...grpc.CallOption) (*AuthLoginRes, error)
}

type authServerRPCClient struct {
	cc *grpc.ClientConn
}

func NewAuthServerRPCClient(cc *grpc.ClientConn) AuthServerRPCClient {
	return &authServerRPCClient{cc}
}

func (c *authServerRPCClient) Login(ctx context.Context, in *AuthLoginReq, opts ...grpc.CallOption) (*AuthLoginRes, error) {
	out := new(AuthLoginRes)
	err := grpc.Invoke(ctx, "/rpc.AuthServerRPC/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthServerRPC service

type AuthServerRPCServer interface {
	Login(context.Context, *AuthLoginReq) (*AuthLoginRes, error)
}

func RegisterAuthServerRPCServer(s *grpc.Server, srv AuthServerRPCServer) {
	s.RegisterService(&_AuthServerRPC_serviceDesc, srv)
}

func _AuthServerRPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerRPCServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AuthServerRPC/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerRPCServer).Login(ctx, req.(*AuthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthServerRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AuthServerRPC",
	HandlerType: (*AuthServerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthServerRPC_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2c, 0x2d, 0xc9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x32, 0xe3, 0xe2, 0x71,
	0x2c, 0x2d, 0xc9, 0xf0, 0xc9, 0x4f, 0xcf, 0xcc, 0x0b, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0x0e,
	0xf5, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x02, 0x31, 0x85, 0x44, 0xb8, 0x58, 0x4b,
	0xf2, 0xb3, 0x53, 0xf3, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x07, 0x14,
	0x7d, 0xc5, 0x42, 0x12, 0x5c, 0xec, 0xa9, 0x45, 0x45, 0xce, 0xf9, 0x29, 0xa9, 0x60, 0xbd, 0xbc,
	0x41, 0x30, 0xae, 0x90, 0x18, 0x17, 0x5b, 0x6a, 0x51, 0x51, 0x70, 0x49, 0x11, 0xd4, 0x00, 0x28,
	0xcf, 0xc8, 0x81, 0x8b, 0x17, 0x64, 0x42, 0x70, 0x6a, 0x51, 0x59, 0x6a, 0x51, 0x50, 0x80, 0xb3,
	0x90, 0x3e, 0x17, 0x2b, 0xd8, 0x38, 0x21, 0x41, 0xbd, 0xa2, 0x82, 0x64, 0x3d, 0x64, 0x67, 0x49,
	0x61, 0x08, 0x15, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0xfd, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x3a, 0xe8, 0xc4, 0xff, 0xd5, 0x00, 0x00, 0x00,
}

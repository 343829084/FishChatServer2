// Code generated by protoc-gen-go.
// source: router.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SendMsgP2PReq struct {
	TargetUID int64  `protobuf:"varint,1,opt,name=targetUID" json:"targetUID,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *SendMsgP2PReq) Reset()                    { *m = SendMsgP2PReq{} }
func (m *SendMsgP2PReq) String() string            { return proto.CompactTextString(m) }
func (*SendMsgP2PReq) ProtoMessage()               {}
func (*SendMsgP2PReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SendMsgP2PRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *SendMsgP2PRes) Reset()                    { *m = SendMsgP2PRes{} }
func (m *SendMsgP2PRes) String() string            { return proto.CompactTextString(m) }
func (*SendMsgP2PRes) ProtoMessage()               {}
func (*SendMsgP2PRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*SendMsgP2PReq)(nil), "rpc.SendMsgP2PReq")
	proto.RegisterType((*SendMsgP2PRes)(nil), "rpc.SendMsgP2PRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RouterRPC service

type RouterRPCClient interface {
	SendMsgP2P(ctx context.Context, in *SendMsgP2PReq, opts ...grpc.CallOption) (*SendMsgP2PRes, error)
}

type routerRPCClient struct {
	cc *grpc.ClientConn
}

func NewRouterRPCClient(cc *grpc.ClientConn) RouterRPCClient {
	return &routerRPCClient{cc}
}

func (c *routerRPCClient) SendMsgP2P(ctx context.Context, in *SendMsgP2PReq, opts ...grpc.CallOption) (*SendMsgP2PRes, error) {
	out := new(SendMsgP2PRes)
	err := grpc.Invoke(ctx, "/rpc.RouterRPC/SendMsgP2P", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouterRPC service

type RouterRPCServer interface {
	SendMsgP2P(context.Context, *SendMsgP2PReq) (*SendMsgP2PRes, error)
}

func RegisterRouterRPCServer(s *grpc.Server, srv RouterRPCServer) {
	s.RegisterService(&_RouterRPC_serviceDesc, srv)
}

func _RouterRPC_SendMsgP2P_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgP2PReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterRPCServer).SendMsgP2P(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RouterRPC/SendMsgP2P",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterRPCServer).SendMsgP2P(ctx, req.(*SendMsgP2PReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouterRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RouterRPC",
	HandlerType: (*RouterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsgP2P",
			Handler:    _RouterRPC_SendMsgP2P_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("router.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xca, 0x2f, 0x2d,
	0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0xb2, 0xe7,
	0xe2, 0x0d, 0x4e, 0xcd, 0x4b, 0xf1, 0x2d, 0x4e, 0x0f, 0x30, 0x0a, 0x08, 0x4a, 0x2d, 0x14, 0x92,
	0xe1, 0xe2, 0x2c, 0x49, 0x2c, 0x4a, 0x4f, 0x2d, 0x09, 0xf5, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x0e, 0x42, 0x08, 0x08, 0x09, 0x70, 0x31, 0xe7, 0x16, 0xa7, 0x4b, 0x30, 0x29, 0x30, 0x6a,
	0x70, 0x06, 0x81, 0x98, 0x4a, 0x8e, 0xa8, 0x06, 0x14, 0x0b, 0x49, 0x70, 0xb1, 0xa7, 0x16, 0x15,
	0x39, 0xe7, 0xa7, 0xa4, 0x82, 0xb5, 0xf3, 0x06, 0xc1, 0xb8, 0x42, 0x62, 0x5c, 0x6c, 0xa9, 0x45,
	0x45, 0xc1, 0x25, 0x45, 0x50, 0xfd, 0x50, 0x9e, 0x91, 0x33, 0x17, 0x67, 0x10, 0xd8, 0x61, 0x41,
	0x01, 0xce, 0x42, 0x66, 0x5c, 0x5c, 0x08, 0xf3, 0x84, 0x84, 0xf4, 0x8a, 0x0a, 0x92, 0xf5, 0x50,
	0x5c, 0x28, 0x85, 0x29, 0x56, 0xac, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0x94, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xc5, 0x5e, 0xc5, 0x10, 0xe4, 0x00, 0x00, 0x00,
}

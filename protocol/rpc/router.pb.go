// Code generated by protoc-gen-go.
// source: router.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RTAccessReq struct {
	UID int64 `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *RTAccessReq) Reset()                    { *m = RTAccessReq{} }
func (m *RTAccessReq) String() string            { return proto.CompactTextString(m) }
func (*RTAccessReq) ProtoMessage()               {}
func (*RTAccessReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type RTAccessRes struct {
	ErrCode  uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr   string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
	ServerID int64  `protobuf:"varint,3,opt,name=serverID" json:"serverID,omitempty"`
}

func (m *RTAccessRes) Reset()                    { *m = RTAccessRes{} }
func (m *RTAccessRes) String() string            { return proto.CompactTextString(m) }
func (*RTAccessRes) ProtoMessage()               {}
func (*RTAccessRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func init() {
	proto.RegisterType((*RTAccessReq)(nil), "rpc.RTAccessReq")
	proto.RegisterType((*RTAccessRes)(nil), "rpc.RTAccessRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RouterRPC service

type RouterRPCClient interface {
	RouterAccess(ctx context.Context, in *RTAccessReq, opts ...grpc.CallOption) (*RTAccessRes, error)
}

type routerRPCClient struct {
	cc *grpc.ClientConn
}

func NewRouterRPCClient(cc *grpc.ClientConn) RouterRPCClient {
	return &routerRPCClient{cc}
}

func (c *routerRPCClient) RouterAccess(ctx context.Context, in *RTAccessReq, opts ...grpc.CallOption) (*RTAccessRes, error) {
	out := new(RTAccessRes)
	err := grpc.Invoke(ctx, "/rpc.RouterRPC/RouterAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouterRPC service

type RouterRPCServer interface {
	RouterAccess(context.Context, *RTAccessReq) (*RTAccessRes, error)
}

func RegisterRouterRPCServer(s *grpc.Server, srv RouterRPCServer) {
	s.RegisterService(&_RouterRPC_serviceDesc, srv)
}

func _RouterRPC_RouterAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RTAccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterRPCServer).RouterAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RouterRPC/RouterAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterRPCServer).RouterAccess(ctx, req.(*RTAccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouterRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RouterRPC",
	HandlerType: (*RouterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouterAccess",
			Handler:    _RouterRPC_RouterAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor4,
}

func init() { proto.RegisterFile("router.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xca, 0x2f, 0x2d,
	0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x92, 0xe7,
	0xe2, 0x0e, 0x0a, 0x71, 0x4c, 0x4e, 0x4e, 0x2d, 0x2e, 0x0e, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62,
	0x0e, 0xf5, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x02, 0x31, 0x95, 0xa2, 0x91, 0x15,
	0x14, 0x0b, 0x49, 0x70, 0xb1, 0xa7, 0x16, 0x15, 0x39, 0xe7, 0xa7, 0xa4, 0x82, 0x15, 0xf1, 0x06,
	0xc1, 0xb8, 0x42, 0x62, 0x5c, 0x6c, 0xa9, 0x45, 0x45, 0xc1, 0x25, 0x45, 0x12, 0x4c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x14, 0x17, 0x47, 0x71, 0x6a, 0x51, 0x59, 0x6a, 0x91, 0xa7,
	0x8b, 0x04, 0x33, 0xd8, 0x5c, 0x38, 0xdf, 0xc8, 0x91, 0x8b, 0x33, 0x08, 0xec, 0xa4, 0xa0, 0x00,
	0x67, 0x21, 0x13, 0x2e, 0x1e, 0x08, 0x07, 0x62, 0x9b, 0x90, 0x80, 0x5e, 0x51, 0x41, 0xb2, 0x1e,
	0x92, 0xeb, 0xa4, 0xd0, 0x45, 0x8a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x9e, 0x31, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x32, 0x62, 0x29, 0x39, 0xdc, 0x00, 0x00, 0x00,
}

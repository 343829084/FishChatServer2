// Code generated by protoc-gen-go.
// source: notify.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NFNotifyMsgReq struct {
	TargetUID int64  `protobuf:"varint,1,opt,name=targetUID" json:"targetUID,omitempty"`
	CurrentID string `protobuf:"bytes,2,opt,name=currentID" json:"currentID,omitempty"`
	TotalID   string `protobuf:"bytes,3,opt,name=totalID" json:"totalID,omitempty"`
}

func (m *NFNotifyMsgReq) Reset()                    { *m = NFNotifyMsgReq{} }
func (m *NFNotifyMsgReq) String() string            { return proto.CompactTextString(m) }
func (*NFNotifyMsgReq) ProtoMessage()               {}
func (*NFNotifyMsgReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *NFNotifyMsgReq) GetTargetUID() int64 {
	if m != nil {
		return m.TargetUID
	}
	return 0
}

func (m *NFNotifyMsgReq) GetCurrentID() string {
	if m != nil {
		return m.CurrentID
	}
	return ""
}

func (m *NFNotifyMsgReq) GetTotalID() string {
	if m != nil {
		return m.TotalID
	}
	return ""
}

type NFNotifyMsgRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *NFNotifyMsgRes) Reset()                    { *m = NFNotifyMsgRes{} }
func (m *NFNotifyMsgRes) String() string            { return proto.CompactTextString(m) }
func (*NFNotifyMsgRes) ProtoMessage()               {}
func (*NFNotifyMsgRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *NFNotifyMsgRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *NFNotifyMsgRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func init() {
	proto.RegisterType((*NFNotifyMsgReq)(nil), "rpc.NFNotifyMsgReq")
	proto.RegisterType((*NFNotifyMsgRes)(nil), "rpc.NFNotifyMsgRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NotifyServerRPC service

type NotifyServerRPCClient interface {
	Notify(ctx context.Context, in *NFNotifyMsgReq, opts ...grpc.CallOption) (*NFNotifyMsgRes, error)
}

type notifyServerRPCClient struct {
	cc *grpc.ClientConn
}

func NewNotifyServerRPCClient(cc *grpc.ClientConn) NotifyServerRPCClient {
	return &notifyServerRPCClient{cc}
}

func (c *notifyServerRPCClient) Notify(ctx context.Context, in *NFNotifyMsgReq, opts ...grpc.CallOption) (*NFNotifyMsgRes, error) {
	out := new(NFNotifyMsgRes)
	err := grpc.Invoke(ctx, "/rpc.NotifyServerRPC/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotifyServerRPC service

type NotifyServerRPCServer interface {
	Notify(context.Context, *NFNotifyMsgReq) (*NFNotifyMsgRes, error)
}

func RegisterNotifyServerRPCServer(s *grpc.Server, srv NotifyServerRPCServer) {
	s.RegisterService(&_NotifyServerRPC_serviceDesc, srv)
}

func _NotifyServerRPC_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFNotifyMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServerRPCServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NotifyServerRPC/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServerRPCServer).Notify(ctx, req.(*NFNotifyMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotifyServerRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NotifyServerRPC",
	HandlerType: (*NotifyServerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _NotifyServerRPC_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify.proto",
}

func init() { proto.RegisterFile("notify.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xcb, 0x2f, 0xc9,
	0x4c, 0xab, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x4a, 0xe3,
	0xe2, 0xf3, 0x73, 0xf3, 0x03, 0x0b, 0xfb, 0x16, 0xa7, 0x07, 0xa5, 0x16, 0x0a, 0xc9, 0x70, 0x71,
	0x96, 0x24, 0x16, 0xa5, 0xa7, 0x96, 0x84, 0x7a, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07,
	0x21, 0x04, 0x40, 0xb2, 0xc9, 0xa5, 0x45, 0x45, 0xa9, 0x79, 0x25, 0x9e, 0x2e, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x08, 0x01, 0x21, 0x09, 0x2e, 0xf6, 0x92, 0xfc, 0x92, 0xc4, 0x1c, 0x4f,
	0x17, 0x09, 0x66, 0xb0, 0x1c, 0x8c, 0xab, 0xe4, 0x84, 0x66, 0x4f, 0x31, 0x48, 0x6d, 0x6a, 0x51,
	0x91, 0x73, 0x7e, 0x4a, 0x2a, 0xd8, 0x16, 0xde, 0x20, 0x18, 0x57, 0x48, 0x8c, 0x8b, 0x2d, 0xb5,
	0xa8, 0x28, 0xb8, 0xa4, 0x08, 0x6a, 0x01, 0x94, 0x67, 0xe4, 0xce, 0xc5, 0x0f, 0x31, 0x21, 0x38,
	0xb5, 0xa8, 0x2c, 0xb5, 0x28, 0x28, 0xc0, 0x59, 0xc8, 0x84, 0x8b, 0x0d, 0x22, 0x24, 0x24, 0xac,
	0x57, 0x54, 0x90, 0xac, 0x87, 0xea, 0x17, 0x29, 0x2c, 0x82, 0xc5, 0x4a, 0x0c, 0x49, 0x6c, 0xe0,
	0x00, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x2b, 0xb1, 0xfc, 0x10, 0x01, 0x00, 0x00,
}

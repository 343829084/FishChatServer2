// Code generated by protoc-gen-go.
// source: register.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RGRegisterReq struct {
	UID      int64  `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *RGRegisterReq) Reset()                    { *m = RGRegisterReq{} }
func (m *RGRegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RGRegisterReq) ProtoMessage()               {}
func (*RGRegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *RGRegisterReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *RGRegisterReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RGRegisterReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RGRegisterRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *RGRegisterRes) Reset()                    { *m = RGRegisterRes{} }
func (m *RGRegisterRes) String() string            { return proto.CompactTextString(m) }
func (*RGRegisterRes) ProtoMessage()               {}
func (*RGRegisterRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *RGRegisterRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGRegisterRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

type RGLoginReq struct {
	UID        int64  `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	AccessAddr string `protobuf:"bytes,3,opt,name=accessAddr" json:"accessAddr,omitempty"`
}

func (m *RGLoginReq) Reset()                    { *m = RGLoginReq{} }
func (m *RGLoginReq) String() string            { return proto.CompactTextString(m) }
func (*RGLoginReq) ProtoMessage()               {}
func (*RGLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *RGLoginReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *RGLoginReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RGLoginReq) GetAccessAddr() string {
	if m != nil {
		return m.AccessAddr
	}
	return ""
}

type RGLoginRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
	Token   string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *RGLoginRes) Reset()                    { *m = RGLoginRes{} }
func (m *RGLoginRes) String() string            { return proto.CompactTextString(m) }
func (*RGLoginRes) ProtoMessage()               {}
func (*RGLoginRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *RGLoginRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGLoginRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func (m *RGLoginRes) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type RGAccessReq struct {
	UID int64 `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *RGAccessReq) Reset()                    { *m = RGAccessReq{} }
func (m *RGAccessReq) String() string            { return proto.CompactTextString(m) }
func (*RGAccessReq) ProtoMessage()               {}
func (*RGAccessReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *RGAccessReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

type RGAccessRes struct {
	ErrCode    uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr     string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
	AccessAddr string `protobuf:"bytes,3,opt,name=accessAddr" json:"accessAddr,omitempty"`
}

func (m *RGAccessRes) Reset()                    { *m = RGAccessRes{} }
func (m *RGAccessRes) String() string            { return proto.CompactTextString(m) }
func (*RGAccessRes) ProtoMessage()               {}
func (*RGAccessRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *RGAccessRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGAccessRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func (m *RGAccessRes) GetAccessAddr() string {
	if m != nil {
		return m.AccessAddr
	}
	return ""
}

type RGAuthReq struct {
	UID int64 `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *RGAuthReq) Reset()                    { *m = RGAuthReq{} }
func (m *RGAuthReq) String() string            { return proto.CompactTextString(m) }
func (*RGAuthReq) ProtoMessage()               {}
func (*RGAuthReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *RGAuthReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

type RGAuthRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
	Token   string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *RGAuthRes) Reset()                    { *m = RGAuthRes{} }
func (m *RGAuthRes) String() string            { return proto.CompactTextString(m) }
func (*RGAuthRes) ProtoMessage()               {}
func (*RGAuthRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *RGAuthRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGAuthRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func (m *RGAuthRes) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type RGPingReq struct {
	UID int64 `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *RGPingReq) Reset()                    { *m = RGPingReq{} }
func (m *RGPingReq) String() string            { return proto.CompactTextString(m) }
func (*RGPingReq) ProtoMessage()               {}
func (*RGPingReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *RGPingReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

type RGPingRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *RGPingRes) Reset()                    { *m = RGPingRes{} }
func (m *RGPingRes) String() string            { return proto.CompactTextString(m) }
func (*RGPingRes) ProtoMessage()               {}
func (*RGPingRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *RGPingRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGPingRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

type RGOnlineReq struct {
	UID int64 `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *RGOnlineReq) Reset()                    { *m = RGOnlineReq{} }
func (m *RGOnlineReq) String() string            { return proto.CompactTextString(m) }
func (*RGOnlineReq) ProtoMessage()               {}
func (*RGOnlineReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *RGOnlineReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

type RGOnlineRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
	Online  bool   `protobuf:"varint,3,opt,name=online" json:"online,omitempty"`
}

func (m *RGOnlineRes) Reset()                    { *m = RGOnlineRes{} }
func (m *RGOnlineRes) String() string            { return proto.CompactTextString(m) }
func (*RGOnlineRes) ProtoMessage()               {}
func (*RGOnlineRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *RGOnlineRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGOnlineRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func (m *RGOnlineRes) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

// group
type RGCreateGroupReq struct {
	UID       int64  `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=groupName" json:"groupName,omitempty"`
}

func (m *RGCreateGroupReq) Reset()                    { *m = RGCreateGroupReq{} }
func (m *RGCreateGroupReq) String() string            { return proto.CompactTextString(m) }
func (*RGCreateGroupReq) ProtoMessage()               {}
func (*RGCreateGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *RGCreateGroupReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *RGCreateGroupReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type RGCreateGroupRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *RGCreateGroupRes) Reset()                    { *m = RGCreateGroupRes{} }
func (m *RGCreateGroupRes) String() string            { return proto.CompactTextString(m) }
func (*RGCreateGroupRes) ProtoMessage()               {}
func (*RGCreateGroupRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *RGCreateGroupRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGCreateGroupRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

type RGJoinGroupReq struct {
	UID     int64  `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=groupID" json:"groupID,omitempty"`
}

func (m *RGJoinGroupReq) Reset()                    { *m = RGJoinGroupReq{} }
func (m *RGJoinGroupReq) String() string            { return proto.CompactTextString(m) }
func (*RGJoinGroupReq) ProtoMessage()               {}
func (*RGJoinGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *RGJoinGroupReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *RGJoinGroupReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type RGJoinGroupRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *RGJoinGroupRes) Reset()                    { *m = RGJoinGroupRes{} }
func (m *RGJoinGroupRes) String() string            { return proto.CompactTextString(m) }
func (*RGJoinGroupRes) ProtoMessage()               {}
func (*RGJoinGroupRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *RGJoinGroupRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGJoinGroupRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

type RGQuitGroupReq struct {
	UID     int64  `protobuf:"varint,1,opt,name=UID" json:"UID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=groupID" json:"groupID,omitempty"`
}

func (m *RGQuitGroupReq) Reset()                    { *m = RGQuitGroupReq{} }
func (m *RGQuitGroupReq) String() string            { return proto.CompactTextString(m) }
func (*RGQuitGroupReq) ProtoMessage()               {}
func (*RGQuitGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *RGQuitGroupReq) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *RGQuitGroupReq) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type RGQuitGroupRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,2,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *RGQuitGroupRes) Reset()                    { *m = RGQuitGroupRes{} }
func (m *RGQuitGroupRes) String() string            { return proto.CompactTextString(m) }
func (*RGQuitGroupRes) ProtoMessage()               {}
func (*RGQuitGroupRes) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *RGQuitGroupRes) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RGQuitGroupRes) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func init() {
	proto.RegisterType((*RGRegisterReq)(nil), "rpc.RGRegisterReq")
	proto.RegisterType((*RGRegisterRes)(nil), "rpc.RGRegisterRes")
	proto.RegisterType((*RGLoginReq)(nil), "rpc.RGLoginReq")
	proto.RegisterType((*RGLoginRes)(nil), "rpc.RGLoginRes")
	proto.RegisterType((*RGAccessReq)(nil), "rpc.RGAccessReq")
	proto.RegisterType((*RGAccessRes)(nil), "rpc.RGAccessRes")
	proto.RegisterType((*RGAuthReq)(nil), "rpc.RGAuthReq")
	proto.RegisterType((*RGAuthRes)(nil), "rpc.RGAuthRes")
	proto.RegisterType((*RGPingReq)(nil), "rpc.RGPingReq")
	proto.RegisterType((*RGPingRes)(nil), "rpc.RGPingRes")
	proto.RegisterType((*RGOnlineReq)(nil), "rpc.RGOnlineReq")
	proto.RegisterType((*RGOnlineRes)(nil), "rpc.RGOnlineRes")
	proto.RegisterType((*RGCreateGroupReq)(nil), "rpc.RGCreateGroupReq")
	proto.RegisterType((*RGCreateGroupRes)(nil), "rpc.RGCreateGroupRes")
	proto.RegisterType((*RGJoinGroupReq)(nil), "rpc.RGJoinGroupReq")
	proto.RegisterType((*RGJoinGroupRes)(nil), "rpc.RGJoinGroupRes")
	proto.RegisterType((*RGQuitGroupReq)(nil), "rpc.RGQuitGroupReq")
	proto.RegisterType((*RGQuitGroupRes)(nil), "rpc.RGQuitGroupRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RegisterServerRPC service

type RegisterServerRPCClient interface {
	Register(ctx context.Context, in *RGRegisterReq, opts ...grpc.CallOption) (*RGRegisterRes, error)
	Login(ctx context.Context, in *RGLoginReq, opts ...grpc.CallOption) (*RGLoginRes, error)
	RouterAccess(ctx context.Context, in *RGAccessReq, opts ...grpc.CallOption) (*RGAccessRes, error)
	Auth(ctx context.Context, in *RGAuthReq, opts ...grpc.CallOption) (*RGAuthRes, error)
	Ping(ctx context.Context, in *RGPingReq, opts ...grpc.CallOption) (*RGPingRes, error)
	Online(ctx context.Context, in *RGOnlineReq, opts ...grpc.CallOption) (*RGOnlineRes, error)
	// group
	CreateGroup(ctx context.Context, in *RGCreateGroupReq, opts ...grpc.CallOption) (*RGCreateGroupRes, error)
	JoinGroup(ctx context.Context, in *RGJoinGroupReq, opts ...grpc.CallOption) (*RGJoinGroupRes, error)
	QuitGroup(ctx context.Context, in *RGQuitGroupReq, opts ...grpc.CallOption) (*RGQuitGroupRes, error)
}

type registerServerRPCClient struct {
	cc *grpc.ClientConn
}

func NewRegisterServerRPCClient(cc *grpc.ClientConn) RegisterServerRPCClient {
	return &registerServerRPCClient{cc}
}

func (c *registerServerRPCClient) Register(ctx context.Context, in *RGRegisterReq, opts ...grpc.CallOption) (*RGRegisterRes, error) {
	out := new(RGRegisterRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServerRPCClient) Login(ctx context.Context, in *RGLoginReq, opts ...grpc.CallOption) (*RGLoginRes, error) {
	out := new(RGLoginRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServerRPCClient) RouterAccess(ctx context.Context, in *RGAccessReq, opts ...grpc.CallOption) (*RGAccessRes, error) {
	out := new(RGAccessRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/RouterAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServerRPCClient) Auth(ctx context.Context, in *RGAuthReq, opts ...grpc.CallOption) (*RGAuthRes, error) {
	out := new(RGAuthRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServerRPCClient) Ping(ctx context.Context, in *RGPingReq, opts ...grpc.CallOption) (*RGPingRes, error) {
	out := new(RGPingRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServerRPCClient) Online(ctx context.Context, in *RGOnlineReq, opts ...grpc.CallOption) (*RGOnlineRes, error) {
	out := new(RGOnlineRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/Online", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServerRPCClient) CreateGroup(ctx context.Context, in *RGCreateGroupReq, opts ...grpc.CallOption) (*RGCreateGroupRes, error) {
	out := new(RGCreateGroupRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServerRPCClient) JoinGroup(ctx context.Context, in *RGJoinGroupReq, opts ...grpc.CallOption) (*RGJoinGroupRes, error) {
	out := new(RGJoinGroupRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerServerRPCClient) QuitGroup(ctx context.Context, in *RGQuitGroupReq, opts ...grpc.CallOption) (*RGQuitGroupRes, error) {
	out := new(RGQuitGroupRes)
	err := grpc.Invoke(ctx, "/rpc.RegisterServerRPC/QuitGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegisterServerRPC service

type RegisterServerRPCServer interface {
	Register(context.Context, *RGRegisterReq) (*RGRegisterRes, error)
	Login(context.Context, *RGLoginReq) (*RGLoginRes, error)
	RouterAccess(context.Context, *RGAccessReq) (*RGAccessRes, error)
	Auth(context.Context, *RGAuthReq) (*RGAuthRes, error)
	Ping(context.Context, *RGPingReq) (*RGPingRes, error)
	Online(context.Context, *RGOnlineReq) (*RGOnlineRes, error)
	// group
	CreateGroup(context.Context, *RGCreateGroupReq) (*RGCreateGroupRes, error)
	JoinGroup(context.Context, *RGJoinGroupReq) (*RGJoinGroupRes, error)
	QuitGroup(context.Context, *RGQuitGroupReq) (*RGQuitGroupRes, error)
}

func RegisterRegisterServerRPCServer(s *grpc.Server, srv RegisterServerRPCServer) {
	s.RegisterService(&_RegisterServerRPC_serviceDesc, srv)
}

func _RegisterServerRPC_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).Register(ctx, req.(*RGRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterServerRPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).Login(ctx, req.(*RGLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterServerRPC_RouterAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGAccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).RouterAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/RouterAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).RouterAccess(ctx, req.(*RGAccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterServerRPC_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).Auth(ctx, req.(*RGAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterServerRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGPingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).Ping(ctx, req.(*RGPingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterServerRPC_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/Online",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).Online(ctx, req.(*RGOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterServerRPC_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGCreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).CreateGroup(ctx, req.(*RGCreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterServerRPC_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGJoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).JoinGroup(ctx, req.(*RGJoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterServerRPC_QuitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RGQuitGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServerRPCServer).QuitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RegisterServerRPC/QuitGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServerRPCServer).QuitGroup(ctx, req.(*RGQuitGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegisterServerRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RegisterServerRPC",
	HandlerType: (*RegisterServerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RegisterServerRPC_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _RegisterServerRPC_Login_Handler,
		},
		{
			MethodName: "RouterAccess",
			Handler:    _RegisterServerRPC_RouterAccess_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _RegisterServerRPC_Auth_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RegisterServerRPC_Ping_Handler,
		},
		{
			MethodName: "Online",
			Handler:    _RegisterServerRPC_Online_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _RegisterServerRPC_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _RegisterServerRPC_JoinGroup_Handler,
		},
		{
			MethodName: "QuitGroup",
			Handler:    _RegisterServerRPC_QuitGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "register.proto",
}

func init() { proto.RegisterFile("register.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0x5e, 0xc9, 0xd6, 0xb5, 0x37, 0x56, 0xca, 0x01, 0x53, 0x64, 0xf1, 0x63, 0xf2, 0x53, 0x25,
	0xa4, 0x3e, 0xc0, 0x24, 0x5e, 0xd8, 0x43, 0xd7, 0x4a, 0xd1, 0x10, 0x82, 0xcd, 0x05, 0xf1, 0x88,
	0x4a, 0x6b, 0x95, 0x08, 0x88, 0xc3, 0x25, 0x85, 0xbf, 0x97, 0xff, 0x04, 0xd9, 0x75, 0x12, 0xa7,
	0xb3, 0x40, 0xb2, 0xf6, 0x96, 0xfb, 0xee, 0xbb, 0xbb, 0xcf, 0xc9, 0x7d, 0x0e, 0x0c, 0x48, 0xae,
	0xd3, 0xa2, 0x94, 0x34, 0xce, 0x49, 0x95, 0x0a, 0x23, 0xca, 0x97, 0xfc, 0x1a, 0x8e, 0x45, 0x22,
	0x6c, 0x42, 0xc8, 0x9f, 0x38, 0x84, 0xe8, 0xe3, 0xe5, 0x2c, 0xee, 0x9c, 0x76, 0x46, 0x91, 0xd0,
	0x8f, 0x88, 0xb0, 0x9f, 0x2d, 0x7e, 0xc8, 0xf8, 0xce, 0x69, 0x67, 0xd4, 0x17, 0xe6, 0x19, 0x19,
	0xf4, 0xf2, 0x45, 0x51, 0xfc, 0x56, 0xb4, 0x8a, 0x23, 0x83, 0xd7, 0x31, 0x9f, 0xb4, 0x5b, 0x16,
	0x18, 0xc3, 0xa1, 0x24, 0x9a, 0xaa, 0x95, 0x34, 0x6d, 0x8f, 0x45, 0x15, 0xe2, 0x09, 0x74, 0x25,
	0xd1, 0xbc, 0x24, 0xdb, 0xdc, 0x46, 0xfc, 0x03, 0x80, 0x48, 0xde, 0xaa, 0x75, 0x9a, 0xf9, 0x25,
	0x3d, 0x84, 0x83, 0x52, 0x7d, 0x93, 0x99, 0x2d, 0xdb, 0x06, 0xf8, 0x14, 0x60, 0xb1, 0x5c, 0xca,
	0xa2, 0x98, 0xac, 0x56, 0x64, 0x65, 0x39, 0x48, 0xab, 0x6b, 0x80, 0xaa, 0x66, 0x6a, 0xe4, 0x4c,
	0xe5, 0xcf, 0xe0, 0x48, 0x24, 0x13, 0x33, 0xc5, 0x2b, 0x96, 0x7f, 0x76, 0x09, 0x21, 0x73, 0xff,
	0x77, 0xae, 0x27, 0xd0, 0x17, 0xc9, 0x64, 0x53, 0x7e, 0xf5, 0xcf, 0x9f, 0x37, 0xe9, 0xdb, 0x3b,
	0xb5, 0x99, 0x79, 0x95, 0x66, 0x6b, 0xff, 0xcc, 0xf3, 0x26, 0x1d, 0xf2, 0xfd, 0xcd, 0x3b, 0x7d,
	0x9f, 0x7d, 0x4f, 0x33, 0xe9, 0xef, 0xff, 0xc9, 0x25, 0x84, 0x9c, 0xea, 0x04, 0xba, 0xca, 0x94,
	0x9b, 0x63, 0xf5, 0x84, 0x8d, 0xf8, 0x05, 0x0c, 0x45, 0x32, 0x25, 0xb9, 0x28, 0x65, 0x42, 0x6a,
	0x93, 0xfb, 0xf7, 0xef, 0x31, 0xf4, 0xd7, 0x3a, 0xfb, 0xae, 0xf1, 0x45, 0x03, 0xf0, 0xd9, 0x8d,
	0x1e, 0x21, 0xef, 0xe0, 0x35, 0x0c, 0x44, 0xf2, 0x46, 0xa5, 0xd9, 0x3f, 0x74, 0xc4, 0x70, 0x68,
	0xc6, 0x5e, 0xce, 0x6c, 0x71, 0x15, 0xf2, 0x8b, 0x9d, 0xea, 0x60, 0x05, 0xd7, 0x9b, 0xb4, 0x0c,
	0x57, 0xe0, 0x54, 0x07, 0x28, 0x78, 0xf1, 0x27, 0x82, 0xfb, 0xd5, 0x4d, 0x32, 0x97, 0xf4, 0x4b,
	0x92, 0xb8, 0x9a, 0xe2, 0x19, 0xf4, 0x2a, 0x10, 0x71, 0x4c, 0xf9, 0x72, 0xdc, 0xba, 0xc2, 0xd8,
	0x4d, 0xac, 0xe0, 0x7b, 0xf8, 0x1c, 0x0e, 0x8c, 0xf7, 0xf1, 0x9e, 0x4d, 0x57, 0xf7, 0x0b, 0xdb,
	0x01, 0x34, 0xf9, 0x0c, 0xee, 0x0a, 0xb5, 0x29, 0x25, 0x6d, 0x7d, 0x8b, 0x43, 0x4b, 0xa9, 0x7d,
	0xce, 0x76, 0x11, 0x5d, 0x35, 0x82, 0x7d, 0xed, 0x33, 0x1c, 0x54, 0xb9, 0xad, 0x27, 0x59, 0x3b,
	0xb6, 0x4c, 0xed, 0x8e, 0x9a, 0x69, 0x9d, 0xc4, 0xda, 0xb1, 0x66, 0x8e, 0xa1, 0xbb, 0xdd, 0xf3,
	0x5a, 0x43, 0xed, 0x0b, 0xb6, 0x8b, 0x68, 0xfe, 0x39, 0x1c, 0x39, 0xab, 0x87, 0x8f, 0x2c, 0xa5,
	0xbd, 0xd2, 0xcc, 0x0b, 0xeb, 0xf2, 0x57, 0xd0, 0xaf, 0xb7, 0x06, 0x1f, 0x58, 0x96, 0xbb, 0x85,
	0xcc, 0x03, 0xda, 0xc2, 0xfa, 0x63, 0xd7, 0x85, 0xee, 0xf2, 0x30, 0x0f, 0x58, 0xf0, 0xbd, 0x2f,
	0x5d, 0xf3, 0x37, 0x7a, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x3d, 0x94, 0xaa, 0x9f, 0x06,
	0x00, 0x00,
}

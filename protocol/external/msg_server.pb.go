// Code generated by protoc-gen-go.
// source: msg_server.proto
// DO NOT EDIT!

package external

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// p2p msg
type ReqSendP2PMsg struct {
	Cmd       uint32 `protobuf:"varint,1,opt,name=cmd" json:"cmd,omitempty"`
	CmdStr    string `protobuf:"bytes,2,opt,name=cmdStr" json:"cmdStr,omitempty"`
	TargetUID int64  `protobuf:"varint,3,opt,name=targetUID" json:"targetUID,omitempty"`
	Msg       string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *ReqSendP2PMsg) Reset()                    { *m = ReqSendP2PMsg{} }
func (m *ReqSendP2PMsg) String() string            { return proto.CompactTextString(m) }
func (*ReqSendP2PMsg) ProtoMessage()               {}
func (*ReqSendP2PMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type ResSendP2PMsg struct {
	Cmd     uint32 `protobuf:"varint,1,opt,name=cmd" json:"cmd,omitempty"`
	CmdStr  string `protobuf:"bytes,2,opt,name=cmdStr" json:"cmdStr,omitempty"`
	ErrCode uint32 `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	ErrStr  string `protobuf:"bytes,4,opt,name=errStr" json:"errStr,omitempty"`
}

func (m *ResSendP2PMsg) Reset()                    { *m = ResSendP2PMsg{} }
func (m *ResSendP2PMsg) String() string            { return proto.CompactTextString(m) }
func (*ResSendP2PMsg) ProtoMessage()               {}
func (*ResSendP2PMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func init() {
	proto.RegisterType((*ReqSendP2PMsg)(nil), "external.ReqSendP2PMsg")
	proto.RegisterType((*ResSendP2PMsg)(nil), "external.ResSendP2PMsg")
}

func init() { proto.RegisterFile("msg_server.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x2d, 0x4e, 0x8f,
	0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0xad,
	0x28, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0x51, 0xca, 0xe4, 0xe2, 0x0d, 0x4a, 0x2d, 0x0c, 0x4e, 0xcd,
	0x4b, 0x09, 0x30, 0x0a, 0xf0, 0x2d, 0x4e, 0x17, 0x12, 0xe0, 0x62, 0x4e, 0xce, 0x4d, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x02, 0x31, 0x85, 0xc4, 0xb8, 0xd8, 0x92, 0x73, 0x53, 0x82, 0x4b,
	0x8a, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x21, 0x19, 0x2e, 0xce, 0x92, 0xc4,
	0xa2, 0xf4, 0xd4, 0x92, 0x50, 0x4f, 0x17, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x84, 0x00,
	0xc8, 0x9c, 0xdc, 0xe2, 0x74, 0x09, 0x16, 0xb0, 0x16, 0x10, 0x53, 0x29, 0x1b, 0x64, 0x55, 0x31,
	0x59, 0x56, 0x49, 0x70, 0xb1, 0xa7, 0x16, 0x15, 0x39, 0xe7, 0xa7, 0xa4, 0x82, 0x2d, 0xe2, 0x0d,
	0x82, 0x71, 0x41, 0x3a, 0x52, 0x8b, 0x8a, 0x40, 0x3a, 0x20, 0x36, 0x41, 0x79, 0x49, 0x6c, 0x60,
	0x8f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x12, 0x99, 0xb9, 0x31, 0xfc, 0x00, 0x00, 0x00,
}

// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FOO int32

const (
	FOO_X FOO = 17
)

var FOO_name = map[int32]string{
	17: "X",
}
var FOO_value = map[string]int32{
	"X": 17,
}

func (x FOO) Enum() *FOO {
	p := new(FOO)
	*p = x
	return p
}
func (x FOO) String() string {
	return proto.EnumName(FOO_name, int32(x))
}
func (x *FOO) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FOO_value, data, "FOO")
	if err != nil {
		return err
	}
	*x = FOO(value)
	return nil
}
func (FOO) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type Test struct {
	Label            *string             `protobuf:"bytes,1,req,name=label" json:"label,omitempty"`
	Type             *int32              `protobuf:"varint,2,opt,name=type,def=77" json:"type,omitempty"`
	Reps             []int64             `protobuf:"varint,3,rep,name=reps" json:"reps,omitempty"`
	Optionalgroup    *Test_OptionalGroup `protobuf:"group,4,opt,name=OptionalGroup" json:"optionalgroup,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Test) Reset()                    { *m = Test{} }
func (m *Test) String() string            { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()               {}
func (*Test) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

const Default_Test_Type int32 = 77

func (m *Test) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Test) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Test_Type
}

func (m *Test) GetReps() []int64 {
	if m != nil {
		return m.Reps
	}
	return nil
}

func (m *Test) GetOptionalgroup() *Test_OptionalGroup {
	if m != nil {
		return m.Optionalgroup
	}
	return nil
}

type Test_OptionalGroup struct {
	RequiredField    *string `protobuf:"bytes,5,req,name=RequiredField" json:"RequiredField,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Test_OptionalGroup) Reset()                    { *m = Test_OptionalGroup{} }
func (m *Test_OptionalGroup) String() string            { return proto.CompactTextString(m) }
func (*Test_OptionalGroup) ProtoMessage()               {}
func (*Test_OptionalGroup) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *Test_OptionalGroup) GetRequiredField() string {
	if m != nil && m.RequiredField != nil {
		return *m.RequiredField
	}
	return ""
}

func init() {
	proto.RegisterType((*Test)(nil), "protocol.Test")
	proto.RegisterType((*Test_OptionalGroup)(nil), "protocol.Test.OptionalGroup")
	proto.RegisterEnum("protocol.FOO", FOO_name, FOO_value)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39, 0x4a, 0x93, 0x18,
	0xb9, 0x58, 0x42, 0x52, 0x8b, 0x4b, 0x84, 0x78, 0xb9, 0x58, 0x73, 0x12, 0x93, 0x52, 0x73, 0x24,
	0x18, 0x15, 0x98, 0x34, 0x38, 0x85, 0x04, 0xb8, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x98, 0x14,
	0x18, 0x35, 0x58, 0xad, 0x98, 0xcc, 0xcd, 0x85, 0x78, 0xb8, 0x58, 0x8a, 0x52, 0x0b, 0x8a, 0x25,
	0x98, 0x15, 0x98, 0x35, 0x98, 0x85, 0x8c, 0xb9, 0x78, 0xf3, 0x0b, 0x4a, 0x32, 0xf3, 0xf3, 0x12,
	0x73, 0xd2, 0x8b, 0xf2, 0x4b, 0x0b, 0x24, 0x58, 0x14, 0x18, 0x35, 0xb8, 0x8c, 0x64, 0xf4, 0x60,
	0x26, 0xeb, 0x81, 0x4c, 0xd5, 0xf3, 0x87, 0xaa, 0x71, 0x07, 0xa9, 0x91, 0x52, 0xe3, 0xe2, 0x45,
	0x11, 0x10, 0x12, 0xe5, 0xe2, 0x0d, 0x4a, 0x2d, 0x2c, 0xcd, 0x2c, 0x4a, 0x4d, 0x71, 0xcb, 0x4c,
	0xcd, 0x49, 0x91, 0x60, 0x05, 0x59, 0xae, 0xc5, 0xc3, 0xc5, 0xec, 0xe6, 0xef, 0x2f, 0xc4, 0xca,
	0xc5, 0x18, 0x21, 0x20, 0x08, 0x08, 0x00, 0x00, 0xff, 0xff, 0x88, 0x22, 0xf9, 0x41, 0xb9, 0x00,
	0x00, 0x00,
}
